#pragma once

// Std
#include <vector>
// OpenSSL
#include <openssl/evp.h>
// Project
#include "robo_trace/processing/stage/stage.hpp"
#include "robo_trace_openssl_plugin/key_manager.hpp"
#include "robo_trace_openssl_plugin/encryption/full/configuration.hpp"


namespace robo_trace {

/**
 * Implements a hash chaining stage based on the SHA256 algorithm.
 * The hash for some message is generated by piping the concatenation
 * of the previouses message hash with the current message into the
 * hashing algorithm. 
 * 
 * This is stage must be executed in a blocking fashion! Only one 
 */
class OpenSSLFullEncryptionForwardStage final : public ProcessingStage {

public:

    /**
     * TODO
     */
    OpenSSLFullEncryptionForwardStage(const OpenSSLFullEncryptionConfiguration::Ptr& configuration, const OpenSSLPluginKeyManager::Ptr& key_manager, const DataContainer::Ptr& metadata);

    /**
     * TODO
     */
    virtual ~OpenSSLFullEncryptionForwardStage();
  
    /**
     *
     */
    virtual ProcessingMode getMode() const final override;
  
    /**
     * TODO
     */
    virtual void process(const ProcessingContext::Ptr& context) final override;

private:

    /** */
    const OpenSSLFullEncryptionConfiguration::Ptr m_configuration;
    /** */
    const OpenSSLPluginKeyManager::Ptr m_key_manager;

    /** */
    std::vector<unsigned char> m_key;
    /** */
    std::vector<unsigned char> m_iv;

    // No idea who's the owner of that pointer tbh.
    const EVP_CIPHER* m_encryption_method;
    /** */
    EVP_CIPHER_CTX* m_encryption_context;

    /** */
    std::vector<unsigned char> m_cipher_buffer;

};

} 
#pragma once

// Std
#include <memory>
// OpenSSL
#include <openssl/evp.h>
// Project
#include "robo_trace_plugin_interface/processing/stage.hpp"
#include "robo_trace_openssl_plugins/key_manager.hpp"
#include "robo_trace_openssl_plugins/encryption/full/configuration.hpp"


namespace robo_trace {

/**
 * Implements a hash chaining stage based on the SHA256 algorithm.
 * The hash for some message is generated by piping the concatenation
 * of the previouses message hash with the current message into the
 * hashing algorithm. 
 * 
 * This is stage must be executed in a blocking fashion! Only one 
 */
class OpenSSLFullEncryptionProcessingStage final : public ProcessingStage {

public:

    /**
     * TODO
     */
    OpenSSLFullEncryptionProcessingStage(const OpenSSLFullEncryptionConfiguration::Ptr& configuration, const OpenSSLPluginKeyManager::Ptr& key_manager);

    /**
     * TODO
     */
    virtual ~OpenSSLFullEncryptionProcessingStage();

    /**
     * 
     */
    const OpenSSLFullEncryptionConfiguration::Ptr getConfiguration() const;

    /**
     * 
     */
    const OpenSSLPluginKeyManager::Ptr getKeyManager() const;

    /**
     * TODO
     */
    virtual void process(MessageProcessingContext::Ptr &context) final override;

private:

    /** */
    const OpenSSLFullEncryptionConfiguration::Ptr m_configuration;
    /** */
    const OpenSSLPluginKeyManager::Ptr m_key_manager;

    // No idea who's the owner of that pointer tbh.
    const EVP_CIPHER* m_encryption_method;
    /** */
    EVP_CIPHER_CTX* m_encryption_context;

    /** */
    std::string m_key;
    /** */
    std::string m_iv;
    
};

} 